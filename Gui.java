/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package odev;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author semih
 */
public class Gui extends javax.swing.JFrame {
    public static LinkedList<Capital> capitals = new LinkedList<>();
    public static LinkedList<Flight> flights = new LinkedList<>();
    public static TimeControl control;
    public static String msg,msgState;
    public static Date date;
    public static boolean goOn;
    public static Thread thread2;
    
    /**
     * Creates new form Gui
     */
    public Gui() {
        readData(); 
        initComponents();
        fillCapitals();
        fillTable();
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jFrame1 = new javax.swing.JFrame();
        jScrollBar1 = new javax.swing.JScrollBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        flightTable2 = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        systemStartButton = new javax.swing.JButton();
        systemPauseButton = new javax.swing.JButton();
        systemResumeButton = new javax.swing.JButton();
        tableFlightNo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cancelLanding = new javax.swing.JButton();
        givePermission = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        tableDelayTime = new javax.swing.JTextField();
        setDelay = new javax.swing.JButton();
        labelSystemTime = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        systemStopButton = new javax.swing.JButton();
        flightState = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tf_flightNo = new javax.swing.JTextField();
        tf_model = new javax.swing.JTextField();
        tf_airline = new javax.swing.JTextField();
        tf_departure = new javax.swing.JTextField();
        tf_arrival = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cb_monday = new javax.swing.JCheckBox();
        cb_tuesday = new javax.swing.JCheckBox();
        cb_wednesday = new javax.swing.JCheckBox();
        cb_thursday = new javax.swing.JCheckBox();
        cb_friday = new javax.swing.JCheckBox();
        cb_saturday = new javax.swing.JCheckBox();
        cb_sunday = new javax.swing.JCheckBox();
        cb_from = new javax.swing.JComboBox<>();
        cb_to = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightTable = new javax.swing.JTable();
        addFlight = new javax.swing.JButton();
        updateFlight = new javax.swing.JButton();
        deleteFlight = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        tf_capitalName = new javax.swing.JTextField();
        capitalAdd = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cb_capitalName = new javax.swing.JComboBox<>();
        capitalDelete = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenu1.setText("jMenu1");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        flightTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight No", "Aircraft Model", "Airlines", "Departure Time", "Arrival Time", "From", "To", "Weekdays"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        flightTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flightTable2MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(flightTable2);

        jLabel11.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel11.setText("SYSTEM");

        systemStartButton.setText("START");
        systemStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemStartButtonActionPerformed(evt);
            }
        });

        systemPauseButton.setText("PAUSE");
        systemPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemPauseButtonActionPerformed(evt);
            }
        });

        systemResumeButton.setText("RESUME");
        systemResumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemResumeButtonActionPerformed(evt);
            }
        });

        tableFlightNo.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel12.setText("Flight Control");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel13.setText("Flight No");

        cancelLanding.setText("Cancel Landing");
        cancelLanding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelLandingActionPerformed(evt);
            }
        });

        givePermission.setText("Give Permission");
        givePermission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                givePermissionActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel14.setText("Delay Time (Min)");

        setDelay.setText("Set Delay");
        setDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDelayActionPerformed(evt);
            }
        });

        labelSystemTime.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        labelSystemTime.setForeground(new java.awt.Color(0, 0, 255));

        jLabel15.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel15.setText("System Time :");

        systemStopButton.setText("STOP");
        systemStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemStopButtonActionPerformed(evt);
            }
        });

        flightState.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        flightState.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1164, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                                .addComponent(systemStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tableFlightNo)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(systemPauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(systemResumeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(cancelLanding, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(givePermission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(flightState, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(tableDelayTime, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(setDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(systemStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(labelSystemTime, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(systemStartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(systemPauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(systemResumeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(systemStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(labelSystemTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(flightState, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(setDelay, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(tableDelayTime)
                    .addComponent(givePermission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelLanding, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tableFlightNo, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(61, 61, 61)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Control", jPanel2);

        jLabel1.setText("Flight No");

        jLabel2.setText("Aircraft Model");

        jLabel3.setText("Airlines");

        jLabel4.setText("Arrival Time");

        jLabel5.setText("Departure Time");

        jLabel6.setText("To");

        jLabel8.setText("Weekdays");

        jLabel9.setText("From");

        cb_monday.setText("Monday");
        cb_monday.setPreferredSize(new java.awt.Dimension(100, 30));

        cb_tuesday.setText("Tuesday");
        cb_tuesday.setPreferredSize(new java.awt.Dimension(100, 30));

        cb_wednesday.setText("Wednesday");
        cb_wednesday.setPreferredSize(new java.awt.Dimension(100, 30));

        cb_thursday.setText("Thursday");
        cb_thursday.setPreferredSize(new java.awt.Dimension(100, 30));

        cb_friday.setText("Friday");
        cb_friday.setPreferredSize(new java.awt.Dimension(100, 30));

        cb_saturday.setText("Saturday");
        cb_saturday.setPreferredSize(new java.awt.Dimension(100, 30));

        cb_sunday.setText("Sunday");
        cb_sunday.setPreferredSize(new java.awt.Dimension(100, 30));

        flightTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight No", "Aircraft Model", "Airlines", "Departure Time", "Arrival Time", "From", "To", "Weekdays"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        flightTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flightTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(flightTable);

        addFlight.setText("Add");
        addFlight.setPreferredSize(new java.awt.Dimension(60, 30));
        addFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFlightActionPerformed(evt);
            }
        });

        updateFlight.setText("Update");
        updateFlight.setPreferredSize(new java.awt.Dimension(60, 30));
        updateFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFlightActionPerformed(evt);
            }
        });

        deleteFlight.setText("Delete");
        deleteFlight.setPreferredSize(new java.awt.Dimension(60, 30));
        deleteFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFlightActionPerformed(evt);
            }
        });

        jLabel7.setText("Capital Name       :");

        capitalAdd.setText("Add");
        capitalAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capitalAddActionPerformed(evt);
            }
        });

        jLabel10.setText("Capital Name       :");

        cb_capitalName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        capitalDelete.setText("Delete");
        capitalDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capitalDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(addFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(updateFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(deleteFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tf_flightNo)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(tf_model))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(tf_airline))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(tf_departure, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(tf_arrival, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cb_from, 0, 100, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cb_to, 0, 100, Short.MAX_VALUE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb_monday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_tuesday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_wednesday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb_saturday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_friday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_thursday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_sunday, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf_capitalName, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(capitalAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cb_capitalName, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(capitalDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb_monday, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tf_flightNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_model, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_airline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_departure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_arrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cb_thursday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cb_from, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cb_to, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_friday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_tuesday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb_saturday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_wednesday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cb_sunday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_capitalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capitalAdd)
                    .addComponent(jLabel10)
                    .addComponent(cb_capitalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(capitalDelete))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Flight/Capital", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>                        

    private void addFlightActionPerformed(java.awt.event.ActionEvent evt) {                                          
        flightState.setText("");
        String[] info = new String[8];
        DefaultTableModel model = (DefaultTableModel)flightTable.getModel();
        DefaultTableModel model2 = (DefaultTableModel)flightTable2.getModel();
        info[0] = tf_flightNo.getText();
        info[1] = tf_model.getText();
        info[2] = tf_airline.getText();
        info[3] = tf_departure.getText();
        info[4] = tf_arrival.getText();
        info[5] = cb_from.getSelectedItem().toString();
        info[6] = cb_to.getSelectedItem().toString();
        try{
            int i = Integer.parseInt(tf_arrival.getText().replace(":", "").trim());
            i = Integer.parseInt(tf_departure.getText().replace(":", "").trim());
        } catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Please Enter the Time in 00:00 Format");
            return;
        }
        if(info[5].equals(info[6])){
            JOptionPane.showMessageDialog(this, "Please Choose Different Capitals");
            return;
        }
        for (Flight f : flights) {
            if(info[0].equals(f.getFlightNumber())){
                JOptionPane.showMessageDialog(this, "This Flight Number is Already Exits");
                return;
            }
        }
        Flight flight = new Flight(info[0], info[1], info[2], info[3], info[4], info[5], info[6]);
        flights.add(flight);
        info[7] = "";
        if(cb_monday.isSelected()){
            info[7] += "Monday,";
            flight.addWeekday("Monday");
        }
        if(cb_tuesday.isSelected()){
            info[7] += "Tuesday,";
            flight.addWeekday("Tuesday");
        }
        if(cb_wednesday.isSelected()){
            info[7] += "Wednesday,";
            flight.addWeekday("Wednesday");
        }
        if(cb_thursday.isSelected()){
            info[7] += "Thursday,";
            flight.addWeekday("Thursday");
        }
        if(cb_friday.isSelected()){
            info[7] += "Friday,";
            flight.addWeekday("Friday");
        }
        if(cb_saturday.isSelected()){
            info[7] += "Saturday,";
            flight.addWeekday("Saturday");
        }
        if(cb_sunday.isSelected()){
            info[7] += "Sunday,";
            flight.addWeekday("Sunday");
        }
        for (String s : info) {
            if(s.isEmpty()){
                JOptionPane.showMessageDialog(this, "Please fill the blanks");
                return;
            }
        }
        if(info[7].isEmpty()){
            JOptionPane.showMessageDialog(this, "Please select at least one weekday");
            return;
        }
        info[7] = info[7].substring(0, info[7].length() - 1);
        writeData(capitals, flights);
        
        model.addRow((Object[])info);
        model2.addRow((Object[])info);
    }                                         
    
    private void updateFlightActionPerformed(java.awt.event.ActionEvent evt) {                                             
        DefaultTableModel model = (DefaultTableModel)flightTable.getModel();
        DefaultTableModel model2 = (DefaultTableModel)flightTable2.getModel();
        int row = flightTable.getSelectedRow();
        if(row == -1){
            if(flightTable.getRowCount() == 0){
                JOptionPane.showMessageDialog(this, "Table is Empty");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please Select a Row");
            }
            return;
        }
        if(cb_from.getSelectedItem().toString().equals(cb_to.getSelectedItem().toString())){
            JOptionPane.showMessageDialog(this, "Please Choose Different Capitals");
            return;
        }
        try{
            int i = Integer.parseInt(tf_arrival.getText().replace(":", "").trim());
            i = Integer.parseInt(tf_departure.getText().replace(":", "").trim());
            
        } catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this, "Please Enter the Time in 00:00 Format");
            return;
        }
        if(anyDaySelected()){
            JOptionPane.showMessageDialog(this, "Please select at least one weekday");
            return;
        }
        Flight flight;     
        flight = flights.get(row);
        model.setValueAt(tf_flightNo.getText(), row, 0);
        model2.setValueAt(tf_flightNo.getText(), row, 0);
        flight.setFlightNumber(tf_flightNo.getText());
        model.setValueAt(tf_model.getText(), row, 1);
        model2.setValueAt(tf_model.getText(), row, 1);
        flight.setAircraftModel(tf_model.getText());
        model.setValueAt(tf_airline.getText(), row, 2);
        model2.setValueAt(tf_airline.getText(), row, 2);
        flight.setAirlines(tf_airline.getText());
        model.setValueAt(tf_departure.getText(), row, 3);
        model2.setValueAt(tf_departure.getText(), row, 3);
        flight.setDepartureTime(tf_departure.getText());
        model.setValueAt(tf_arrival.getText(), row, 4);
        model2.setValueAt(tf_arrival.getText(), row, 4);
        flight.setArrivalTime(tf_arrival.getText());
        model.setValueAt(cb_from.getSelectedItem().toString(), row, 5);
        model2.setValueAt(cb_from.getSelectedItem().toString(), row, 5);
        flight.setDepartureCity(cb_from.getSelectedItem().toString());
        model.setValueAt(cb_to.getSelectedItem().toString(), row, 6);
        model2.setValueAt(cb_to.getSelectedItem().toString(), row, 6);
        flight.setArrivalCity(cb_to.getSelectedItem().toString());
        String days = "";
        flight.removeWeekdays();
        if(cb_monday.isSelected()){
            days += "Monday,";
            flight.addWeekday("Monday");
        }
        if(cb_tuesday.isSelected()){
            days += "Tuesday,";
            flight.addWeekday("Tuesday");
        }
        if(cb_wednesday.isSelected()){
            days += "Wednesday,";
            flight.addWeekday("Wednesday");
        }
        if(cb_thursday.isSelected()){
            days += "Thursday,";
            flight.addWeekday("Thursday");
        }
        if(cb_friday.isSelected()){
            days += "Friday,";
            flight.addWeekday("Friday");
        }
        if(cb_saturday.isSelected()){
            days += "Saturday,";
            flight.addWeekday("Saturday");
        }
        if(cb_sunday.isSelected()){
            days += "Sunday,";
            flight.addWeekday("Sunday");
        }
        days = days.substring(0, days.length() - 1);
        model.setValueAt(days, row, 7);
        model2.setValueAt(days, row, 7);
        writeData(capitals, flights);
        
        JOptionPane.showMessageDialog(this, "Succesfully Updated");
        
    }                                            

    private void capitalDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                              
        DefaultTableModel model = (DefaultTableModel)flightTable.getModel();
        String name = cb_capitalName.getSelectedItem().toString();
        if(name.equals("Select")){
            JOptionPane.showMessageDialog(this, "Please Select a Capital");
        }
        else{
            for (int i = 0; i < flights.size(); i++) {
                if(flights.get(i).getArrivalCity().equals(name)|| flights.get(i).getDepartureCity().equals(name)){
                    model.removeRow(i);
                    flights.remove(i);
                    i--;
                }
            }
            int i = 0;
            while(!capitals.get(i).getName().equals(name))
                i++;
            capitals.remove(i);
            cb_from.removeItem(name);
            cb_to.removeItem(name);
            cb_capitalName.removeItem(name);
            writeData(capitals, flights);
        }
    }                                             
    
    private boolean anyDaySelected(){
        String days = "";
        if(cb_monday.isSelected()){
            days += "Monday,";
        }
        if(cb_tuesday.isSelected()){
            days += "Tuesday,";
        }
        if(cb_wednesday.isSelected()){
            days += "Wednesday,";
        }
        if(cb_thursday.isSelected()){
            days += "Thursday,";
        }
        if(cb_friday.isSelected()){
            days += "Friday,";
        }
        if(cb_saturday.isSelected()){
            days += "Saturday,";
        }
        if(cb_sunday.isSelected()){
            days += "Sunday,";
        }
        return days.isEmpty();
    }
    
    private void flightTableMouseClicked(java.awt.event.MouseEvent evt) {                                         
        DefaultTableModel model = (DefaultTableModel)flightTable.getModel();
        int row = flightTable.getSelectedRow();
        cb_monday.setSelected(false);
        cb_tuesday.setSelected(false);
        cb_wednesday.setSelected(false);
        cb_thursday.setSelected(false);
        cb_friday.setSelected(false);
        cb_saturday.setSelected(false);
        cb_sunday.setSelected(false);
        tf_flightNo.setText(model.getValueAt(row, 0).toString());
        tf_model.setText(model.getValueAt(row, 1).toString());
        tf_airline.setText(model.getValueAt(row, 2).toString());
        tf_departure.setText(model.getValueAt(row, 3).toString());
        tf_arrival.setText(model.getValueAt(row, 4).toString());
        cb_from.setSelectedItem(model.getValueAt(row, 5).toString()); 
        cb_to.setSelectedItem(model.getValueAt(row, 6).toString());
        String[] days = model.getValueAt(row, 7).toString().split(",");
        for (String day : days) {
            if(day.equals("Monday"))
                cb_monday.setSelected(true);
            else if(day.equals("Tuesday"))
                cb_tuesday.setSelected(true);
            else if(day.equals("Wednesday"))
                cb_wednesday.setSelected(true);
            else if(day.equals("Thursday"))
                cb_thursday.setSelected(true);
            else if(day.equals("Friday"))
                cb_friday.setSelected(true);
            else if(day.equals("Saturday"))
                cb_saturday.setSelected(true);
            else
                cb_sunday.setSelected(true);
        }
        
        
        
    }                                        

    private void deleteFlightActionPerformed(java.awt.event.ActionEvent evt) {                                             
        DefaultTableModel model = (DefaultTableModel)flightTable.getModel();
        DefaultTableModel model2 = (DefaultTableModel)flightTable2.getModel();
        int row = flightTable.getSelectedRow();
        if(row == -1){
            if(flightTable.getRowCount() == 0){
                JOptionPane.showMessageDialog(this, "Table is Empty");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please Select a Row");
            }
            return;
        }
        int i = 0;
        while(!flights.get(i).getFlightNumber().equals(tf_flightNo.getText()))
            i++;
        flights.remove(i);
        model.removeRow(row);
        model2.removeRow(row);
        JOptionPane.showMessageDialog(this, "Succesfully Deleted");
        writeData(capitals, flights);
    }                                            

    private void capitalAddActionPerformed(java.awt.event.ActionEvent evt) {                                           
        String name = tf_capitalName.getText();
        if(name.trim().matches(".*\\d.*")){
            JOptionPane.showMessageDialog(this, "Capital Name must not Contain a Number");
            return;
        }
        for (Capital capital : capitals) {
            if(capital.getName().equals(name)){
                JOptionPane.showMessageDialog(this, "This Capital is Already Exists");
                return;
            }
        }
        
            capitals.add(new Capital(tf_capitalName.getText()));
            JOptionPane.showMessageDialog(this, "Succesfully Added");
            writeData(capitals, flights);
            cb_from.addItem(tf_capitalName.getText());
            cb_to.addItem(tf_capitalName.getText());
            cb_capitalName.addItem(tf_capitalName.getText());
        
    }                                          

    private void systemStartButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  

        control = new TimeControl(true);
        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                while(control.getResume()){
                    labelSystemTime.setText(msg);
                    flightState.setText(msgState);
                }
            }
        });
        thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                permission();
            }
        });
        control.start();
        thread1.start();
        thread2.start();
        try{
            for (Flight f : flights) {
                f.start();
            }
        } catch(IllegalThreadStateException e){
            
        }
        
    }                                                 
    
    private void permission(){
        
        while(true){
            for (Flight flight : flights) {
                try{
                    if(flight.getAskPermission()){
                        //date = control.getDate();
                        //control.setResume(false);
                        JOptionPane.showMessageDialog(this, 
                        flight.getFlightNumber() + " asks for permission");
                        try {
                            synchronized(thread2){
                                thread2.wait();
                            }   
                            thread2.sleep(250);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                        }                            
                    }
                }catch(NullPointerException ex){
                }
            }
        }
        
    }
    
    private void systemPauseButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        date = control.getDate();
        control.setResume(false);
    }                                                 
    
    private void systemResumeButtonActionPerformed() {                                                   
        control = new TimeControl(true, date);
        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                while(control.getResume()){
                    labelSystemTime.setText(msg);
                }
            }
        });       
        control.start();
        thread1.start();
    }
    
    private void systemResumeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        control = new TimeControl(true, date);
        Thread thread1 = new Thread(new Runnable() {
            @Override
            public void run() {
                while(control.getResume()){
                    labelSystemTime.setText(msg);
                }
            }
        });       
        control.start();
        thread1.start();
    }                                                  

    private void systemStopButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        control.setResume(false);
        labelSystemTime.setText("");
    }                                                

    private void cancelLandingActionPerformed(java.awt.event.ActionEvent evt) {                                              
        String no = tableFlightNo.getText();
        for (Flight flight : flights) {
            if(flight.getFlightNumber().equals(no)){
                DefaultTableModel model = (DefaultTableModel)flightTable.getModel();
                DefaultTableModel model2 = (DefaultTableModel)flightTable2.getModel();  
                
                int i = flights.indexOf(flight);
                flights.remove(i);
                model.removeRow(i);
                model2.removeRow(i);                
                JOptionPane.showMessageDialog(this, "Succesfully Deleted");
                writeData(capitals, flights);
                systemResumeButtonActionPerformed();
                return;
            }
        }
        JOptionPane.showMessageDialog(this, "Flight No Not Found");
    }                                             

    private void flightTable2MouseClicked(java.awt.event.MouseEvent evt) {                                          
        DefaultTableModel model = (DefaultTableModel)flightTable2.getModel();
        int row = flightTable2.getSelectedRow();
        tableFlightNo.setText(model.getValueAt(row, 0).toString());
    }                                         

    private void givePermissionActionPerformed(java.awt.event.ActionEvent evt) {                                               
        DefaultTableModel model = (DefaultTableModel)flightTable.getModel();
        DefaultTableModel model2 = (DefaultTableModel)flightTable2.getModel();
        String no = tableFlightNo.getText();
        for (Flight f : flights) {
            if(f.getFlightNumber().equals(no)){
                model.removeRow(flights.indexOf(f));
                model2.removeRow(flights.indexOf(f));
                flights.remove(f);
                systemResumeButtonActionPerformed();
                synchronized(thread2){
                    thread2.notify();
                }
                writeData(capitals, flights);
                return;
            }
        }
        JOptionPane.showMessageDialog(this, "Flight No Not Found");
        
    }                                              

    private void setDelayActionPerformed(java.awt.event.ActionEvent evt) {                                         
        DefaultTableModel model = (DefaultTableModel)flightTable.getModel();
        DefaultTableModel model2 = (DefaultTableModel)flightTable2.getModel();     
        String no = tableFlightNo.getText();
        String delay = tableDelayTime.getText();
        String hourStr,minStr,newTime;
        if(delay.length()== 0){
            JOptionPane.showMessageDialog(this, "Please Enter Delay Time");
            return;
        }
        if(!delay.matches("\\d+")){
            JOptionPane.showMessageDialog(this, "Please Enter Number of Minutes");
            return;
        }
        int i = 0;
        while(i<flights.size() && !flights.get(i).getFlightNumber().equals(no)){
            i++;
        }
        if(i == flights.size()){
            JOptionPane.showMessageDialog(this, "Flight No Not Found");
            return;
        }
        else{
            Flight f = flights.get(i);
            String time = f.getArrivalTime();
            int hour = Integer.parseInt(time.substring(0,2));
            int min = Integer.parseInt(time.substring(3));
            int del = Integer.parseInt(delay);
            boolean addZeroToHour = false;
            boolean addZeroToMin = false;
            
            if(min + del < 60){
                if(min + del < 10)
                    newTime = hour + ":0" + (min+del);                
                else
                    newTime = hour + ":" + (min+del);
                
            }
            else {        
                hour += (min + del)/60;
                min = (min + del)%60;
                if(hour > 23){
                    hour = hour%24;
                    if(hour < 10){
                        addZeroToHour = true;
                    }
                }
                if(min < 10){
                    addZeroToMin = true;
                }
                if(addZeroToHour){
                    hourStr = "0" + Integer.toString(hour);
                }
                else{
                    hourStr = Integer.toString(hour);
                }
                if(addZeroToMin){
                    minStr = "0" + Integer.toString(min);
                }
                else{
                    minStr = Integer.toString(min);
                }               
                newTime = hourStr + ":" + minStr;
                
            }                                  
            f.setArrivalTime(newTime);
            if(f.getAskPermission()){
                f.setAskPermission(false);
                synchronized (thread2){
                    thread2.notify();
                }
                
            }
            model.setValueAt(newTime, flights.indexOf(f), 4);
            model2.setValueAt(newTime, flights.indexOf(f), 4);
            writeData(capitals, flights);
        }
        
    }                                        
    
    private void readData(){
        try(ObjectInputStream in = new ObjectInputStream(new FileInputStream("capitals.bin"))){
           
            Gui.capitals = (LinkedList<Capital>)in.readObject();
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try(ObjectInputStream in = new ObjectInputStream(new FileInputStream("flights.bin"))){
            
            
            Gui.flights = (LinkedList<Flight>)in.readObject();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
   
    public static void writeData(LinkedList<Capital> capitals, LinkedList<Flight> flights){
        
        try(ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("capitals.bin"))){
            
            out.writeObject(capitals);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try(ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("flights.bin"))){
            
            out.writeObject(flights);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void fillCapitals(){
        for (Capital capital : capitals) {
            cb_from.addItem(capital.getName());
            cb_to.addItem(capital.getName());
            cb_capitalName.addItem(capital.getName());
        }
    }
    
    public void fillTable(){
        DefaultTableModel model = (DefaultTableModel)flightTable.getModel();
        DefaultTableModel model2 = (DefaultTableModel)flightTable2.getModel();
        for (Flight flight : flights) {
            model.addRow((Object[])flight.getInfo());
            model2.addRow((Object[])flight.getInfo());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton addFlight;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelLanding;
    private javax.swing.JButton capitalAdd;
    private javax.swing.JButton capitalDelete;
    private javax.swing.JComboBox<String> cb_capitalName;
    private javax.swing.JCheckBox cb_friday;
    private javax.swing.JComboBox<String> cb_from;
    private javax.swing.JCheckBox cb_monday;
    private javax.swing.JCheckBox cb_saturday;
    private javax.swing.JCheckBox cb_sunday;
    private javax.swing.JCheckBox cb_thursday;
    private javax.swing.JComboBox<String> cb_to;
    private javax.swing.JCheckBox cb_tuesday;
    private javax.swing.JCheckBox cb_wednesday;
    private javax.swing.JButton deleteFlight;
    private javax.swing.JLabel flightState;
    private javax.swing.JTable flightTable;
    private javax.swing.JTable flightTable2;
    private javax.swing.JButton givePermission;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelSystemTime;
    private javax.swing.JButton setDelay;
    private javax.swing.JButton systemPauseButton;
    private javax.swing.JButton systemResumeButton;
    private javax.swing.JButton systemStartButton;
    private javax.swing.JButton systemStopButton;
    private javax.swing.JTextField tableDelayTime;
    private javax.swing.JTextField tableFlightNo;
    private javax.swing.JTextField tf_airline;
    private javax.swing.JTextField tf_arrival;
    private javax.swing.JTextField tf_capitalName;
    private javax.swing.JTextField tf_departure;
    private javax.swing.JTextField tf_flightNo;
    private javax.swing.JTextField tf_model;
    private javax.swing.JButton updateFlight;
    // End of variables declaration                   
}
